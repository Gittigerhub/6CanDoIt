spring.application.name=roomservice

# 서버 설정
server.port=8080

# 데이터베이스 설정
spring.profiles.active=mariaDB

# 개발환경
# java수정시 서버 재실행
spring.devtools.restart.enabled=true
# html수정시 바로 적용
spring.devtools.livereload.enabled=true

# JPA 설정
# Entity를 수정시 데이터베이스 삭제 후 사용
# update 대신 create로 수정 후 사용
# RDS, MariaDB를 사용시 변경사항이 있으면 heidiSQL로 수정해서 사용
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true

# thymeleaf 설정
# 개발시 false, 프로젝트 완성 및 배포시 true
spring.thymeleaf.cache=false
spring.thymeleaf.encoding=UTF-8
# 마지막에 /표기 필수
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
# 없는 html사용을 방지(html 지정시 오류 방지)
spring.thymeleaf.check-template-location=true

# 파일업로드
# multipart는 반드시 post로 전송가능
# 웹에서 다중 파일 전송기능을 활성화
# 파일업로드 활성화
spring.servlet.multipart.enabled=true
# 파일의 전체 크기(용량) 전체용량/파일크기=한번에 전송가능한 파일수
spring.servlet.multipart.max-request-size=50MB
# 각 이미지파일(pdf파일)등 1개의 전송할 파일의 최대크기(용량)
spring.servlet.multipart.max-file-size=10MB

# S3
# S3에 저장할 폴더명
imgUploadLocation = images

# S3접근정보(공개키, 비밀키, 정보)   // 인텔리 제이 자체에 환경변수로 등록하여 동작하면서 깃 커밋 안돼도록 조치
cloud.aws.credentials.access-Key=${aws.accessKey}
cloud.aws.credentials.secret-Key=${aws.secretKey}
cloud.aws.s3.bucket=${aws.s3.bucket}
cloud.aws.region.static=${aws.region}
cloud.aws.stack.auto=${aws.stack}

# 이메일
# Google에 외부 메일전송 키를 발급

# 메일 보내주는 서버
spring.mail.host=smtp.gmail.com
# 메일 포트 번호
spring.mail.port=587
# 본인 메일
spring.mail.username=himyeongsun@gmail.com
# 키
spring.mail.password=sawf kqdf nesi boej
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# 비밀번호 임시발급
# 가입메일 확인 -> 메일로 접속주소와 비밀키로 전달해서 -> 페이지에 비밀키값이 들어오는걸 비교
# 맞으면 정확한 이메일, 틀리면 가입할 수 없는 메일

# 섹션 유지시간 설정(로그인 유지시간)
server.servlet.session.timeout=30m

# Hibernate의 SQL 타입 변환 및 바인딩 과정의 상세 로그를 출력하도록 지정
# SQL을 실행할 때 파라미터가 실제로 어떤 값으로 바인딩되는지를 자세히 출력
# JPA/Hibernate에서 SQL 실행 시, 예상과 다른 값이 바인딩될 때 디버깅용으로 사용
logging.level.org.hibernate.type.descriptor.sql = trace

# 서버가 재시작되더라도 HTTP 세션을 유지할지 여부를 결정
# 서버가 재시작될 때 세션이 초기화됩니다.
# 로그인 정보나 세션 상태를 서버 재시작 시 유지하고 싶지 않을 때 (예: 개발 환경)
server.servlet.session.persistent=false